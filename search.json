[{"path":"https://p-wegmueller.github.io/reviser/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 reviser authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/literature-review.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The Role and Importance of Revisions in Time Series Data","text":"Revisions time series data, particularly official statistics, serve integral component statistical quality management. preliminary estimates provide timely information, subsequent revisions refine figures, ensuring accuracy alignment reality. study revisions long area interest statistical economic literature, researchers statistical agencies recognizing significance evaluating data reliability, improving forecasting models, enhancing policymaking (Eurostat 2023; National Statistics 2024).","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/literature-review.html","id":"understanding-the-magnitude-of-revisions","dir":"Articles","previous_headings":"","what":"Understanding the Magnitude of Revisions","title":"The Role and Importance of Revisions in Time Series Data","text":"fundamental aspect revision studies involves measuring magnitude changes initial estimates final values. Large revisions can indicate deficiencies early estimation methods, minimal revisions suggest preliminary figures already close true values. Statistical agencies U.S. Bureau Economic Analysis (BEA), Eurostat, Office National Statistics (ONS) monitor revision magnitudes assess data quality methodological consistency (Eurostat 2023; Bureau Economic Analysis 2024). One key reason analyzing revision magnitude detect systematic biases. revisions consistently move one direction—upward downward—suggests systematic underestimation overestimation initial estimates (J. Faust Wright 2005). example, GDP estimates many countries tend revised upward comprehensive tax business data become available, revealing early estimates often underestimate economic activity (Aruoba 2008). Beyond identifying biases, revision magnitude crucial policymakers financial markets. Large revisions imply initial data releases may reliable real-time decision-making. Central banks, example, base monetary policy decisions indicators inflation, GDP growth, unemployment. figures later subject substantial revisions, policy measures may misaligned actual state economy (Croushore Stark 2003).","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/literature-review.html","id":"the-dynamics-of-revisions-and-what-they-reveal","dir":"Articles","previous_headings":"","what":"The Dynamics of Revisions and What They Reveal","title":"The Role and Importance of Revisions in Time Series Data","text":"Beyond magnitude, study revision patterns time reveals important insights data reliability, economic fluctuations, statistical methodologies. persistence revisions—whether initial errors short-lived remain consistent multiple revisions—indicates whether early estimates contain useful signals merely statistical noise (Mankiw Shapiro 1986). Revisions also tend vary across different phases economic cycle. Research shown economic downturns, GDP employment figures often undergo larger downward revisions periods economic stability (Sinclair Stekler 2013). partly downturns involve sudden shifts business conditions fully captured early estimates, requiring later revisions data become available.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/literature-review.html","id":"the-uses-of-studying-revisions-in-time-series-data","dir":"Articles","previous_headings":"","what":"The Uses of Studying Revisions in Time Series Data","title":"The Role and Importance of Revisions in Time Series Data","text":"analysis revisions several practical applications statistics, economics, policy. First, enhances forecasting accuracy. Economic models rely historical data, understanding revision patterns helps forecasters adjust models anticipate changes early estimates (Croushore 2011). Revisions also provide insights statistical methodology data collection processes. examining variables tend heavily revised, statistical agencies can refine estimation techniques improve early releases (Eurostat 2023). ONS (National Statistics 2024) similarly notes rebasing statistical indices integrating new data sources can improve stability revisions time. Another critical use revision studies policymaking. Governments central banks need reliable data make informed decisions, awareness revision trends allows interpret initial estimates appropriate level caution. policymakers advocate publication confidence intervals around preliminary estimates convey uncertainty associated early releases (Manski 2014). Transparency revision processes essential maintaining credibility. Statistical agencies increasingly publish detailed revision histories, allowing users track changes time. BEA, example, provides documentation GDP estimates evolve preliminary final releases, helping economists understand sources scale revisions (Bureau Economic Analysis 2024).","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/literature-review.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"The Role and Importance of Revisions in Time Series Data","text":"Studying revisions time series data fundamental ensuring accuracy, reliability, transparency official statistics. Measuring magnitude revisions allows researchers policymakers assess credibility initial estimates, detect systematic biases, refine statistical methodologies. Analyzing dynamics revisions sheds light data reliability, economic cycle effects, forecasting challenges. Furthermore, revision studies play critical role improving statistical methods, informing policymaking, enhancing public confidence official statistics.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/reviser.html","id":"package-conventions","dir":"Articles","previous_headings":"","what":"Package conventions","title":"Introduction to reviser","text":"conventional way represent vintage data real-time data matrix, row represents time period column represents successive releases data. known wide format. package supports data wide format. assumes data organized following columns: time, time period Publication dates 'yyyy-mm-dd' format release numbers release_# wide format practical inspection, data manipulation often easier long (tdy) format, consists : time, time period pub_date /release, publication date release number value, reported value. id, optional column distinguish different series illustration, package provides dataset long format, gdp. , examine GDP growth rates US Euro Area 2007–2009 financial crisis.","code":"# Example long-format US GDP data data(\"gdp\") gdp_us_short <- gdp %>%    dplyr::filter(id == \"US\") %>%   ts_pc() %>%   filter(     pub_date >= as.Date(\"2007-01-01\"),     pub_date < as.Date(\"2009-01-01\"),     time  >= as.Date(\"2007-01-01\"),     time < as.Date(\"2009-01-01\")   )  # Example long-format EA GDP data gdp_ea_short <- gdp %>%   dplyr::filter(id == \"EA\") %>%   ts_pc() %>%   filter(     pub_date >= as.Date(\"2007-01-01\"),     pub_date < as.Date(\"2009-01-01\"),     time  >= as.Date(\"2007-01-01\"),     time < as.Date(\"2009-01-01\")   )  head(gdp_ea_short) #> # A tibble: 6 × 4 #>   time       pub_date   value id    #>   <date>     <date>     <dbl> <chr> #> 1 2007-01-01 2007-04-01 0.603 EA    #> 2 2007-01-01 2007-07-01 0.707 EA    #> 3 2007-04-01 2007-07-01 0.349 EA    #> 4 2007-01-01 2007-10-01 0.780 EA    #> 5 2007-04-01 2007-10-01 0.310 EA    #> 6 2007-07-01 2007-10-01 0.714 EA"},{"path":"https://p-wegmueller.github.io/reviser/articles/reviser.html","id":"convert-long-to-wide-format","dir":"Articles","previous_headings":"","what":"Convert Long to Wide Format","title":"Introduction to reviser","text":"transform dataset long format wide format, use vintages_wide(). function requires columns time value, along either pub_date release. optional id column can used distinguish multiple series.","code":"# Convert wide-format data to long format wide_ea_short <- vintages_wide(gdp_ea_short) head(wide_ea_short) #> $EA #> # A tibble: 7 × 8 #>   time       `2007-04-01` `2007-07-01` `2007-10-01` `2008-01-01` `2008-04-01` #>   <date>            <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #> 1 2007-01-01        0.603        0.707        0.780        0.789        0.745 #> 2 2007-04-01       NA            0.349        0.310        0.274        0.334 #> 3 2007-07-01       NA           NA            0.714        0.750        0.721 #> 4 2007-10-01       NA           NA           NA            0.382        0.352 #> 5 2008-01-01       NA           NA           NA           NA            0.800 #> 6 2008-04-01       NA           NA           NA           NA           NA     #> 7 2008-07-01       NA           NA           NA           NA           NA     #> # ℹ 2 more variables: `2008-07-01` <dbl>, `2008-10-01` <dbl>"},{"path":"https://p-wegmueller.github.io/reviser/articles/reviser.html","id":"convert-wide-to-long-format","dir":"Articles","previous_headings":"","what":"Convert Wide to Long Format","title":"Introduction to reviser","text":"revert long format, use vintages_long(). function expects column names wide format valid dates contain string \"release\".","code":"# Convert back to long format long_ea_short <- vintages_long(wide_ea_short) head(long_ea_short) #> # A tibble: 6 × 4 #>   time       pub_date   value id    #>   <date>     <chr>      <dbl> <chr> #> 1 2007-01-01 2007-04-01 0.603 EA    #> 2 2007-01-01 2007-07-01 0.707 EA    #> 3 2007-01-01 2007-10-01 0.780 EA    #> 4 2007-01-01 2008-01-01 0.789 EA    #> 5 2007-01-01 2008-04-01 0.745 EA    #> 6 2007-01-01 2008-07-01 0.745 EA"},{"path":"https://p-wegmueller.github.io/reviser/articles/reviser.html","id":"handling-multiple-series-with-id","dir":"Articles","previous_headings":"","what":"Handling Multiple Series with id","title":"Introduction to reviser","text":"id column present, vintages_wide() returns list one dataset per unique id. Conversely, vintages_long() maintains id column distinguish series.","code":"gdp_short <- bind_rows(   gdp_ea_short %>% mutate(id = \"EA\"),   gdp_us_short %>% mutate(id = \"US\") ) gdp_wide_short <- vintages_wide(gdp_short) head(gdp_wide_short) #> $EA #> # A tibble: 7 × 8 #>   time       `2007-04-01` `2007-07-01` `2007-10-01` `2008-01-01` `2008-04-01` #>   <date>            <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #> 1 2007-01-01        0.603        0.707        0.780        0.789        0.745 #> 2 2007-04-01       NA            0.349        0.310        0.274        0.334 #> 3 2007-07-01       NA           NA            0.714        0.750        0.721 #> 4 2007-10-01       NA           NA           NA            0.382        0.352 #> 5 2008-01-01       NA           NA           NA           NA            0.800 #> 6 2008-04-01       NA           NA           NA           NA           NA     #> 7 2008-07-01       NA           NA           NA           NA           NA     #> # ℹ 2 more variables: `2008-07-01` <dbl>, `2008-10-01` <dbl> #>  #> $US #> # A tibble: 7 × 8 #>   time       `2007-04-01` `2007-07-01` `2007-10-01` `2008-01-01` `2008-04-01` #>   <date>            <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #> 1 2007-01-01        0.162        0.150        0.150        0.150        0.150 #> 2 2007-04-01       NA            0.974        0.942        0.942        0.942 #> 3 2007-07-01       NA           NA            1.21         1.20         1.20  #> 4 2007-10-01       NA           NA           NA            0.156        0.144 #> 5 2008-01-01       NA           NA           NA           NA            0.224 #> 6 2008-04-01       NA           NA           NA           NA           NA     #> 7 2008-07-01       NA           NA           NA           NA           NA     #> # ℹ 2 more variables: `2008-07-01` <dbl>, `2008-10-01` <dbl>"},{"path":"https://p-wegmueller.github.io/reviser/articles/reviser.html","id":"extracting-releases","dir":"Articles","previous_headings":"","what":"Extracting Releases","title":"Introduction to reviser","text":"data follows package conventions, can analyzed . common task assessing first release data, corresponds diagonal real-time data matrix. Use get_nth_release() extract nth release. function 0-indexed, first release corresponds n = 0. assess data accuracy, need define final release. Since many statistical agencies continue revising data indefinitely, latest release often used benchmark. Use get_nth_release(n = \"latest\") extract recent vintage. agencies fix data certain period (e.g., Germany finalizes GDP data August four years initial release). function get_fixed_release() extracts fixed releases.","code":"# Get the first release and check in wide format gdp_releases <- get_nth_release(gdp_short, n = 0) vintages_wide(gdp_releases) #> Warning: Ignoring columns: release #> $EA #> # A tibble: 7 × 8 #>   time       `2007-04-01` `2007-07-01` `2007-10-01` `2008-01-01` `2008-04-01` #>   <date>            <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #> 1 2007-01-01        0.603       NA           NA           NA           NA     #> 2 2007-04-01       NA            0.349       NA           NA           NA     #> 3 2007-07-01       NA           NA            0.714       NA           NA     #> 4 2007-10-01       NA           NA           NA            0.382       NA     #> 5 2008-01-01       NA           NA           NA           NA            0.800 #> 6 2008-04-01       NA           NA           NA           NA           NA     #> 7 2008-07-01       NA           NA           NA           NA           NA     #> # ℹ 2 more variables: `2008-07-01` <dbl>, `2008-10-01` <dbl> #>  #> $US #> # A tibble: 7 × 8 #>   time       `2007-04-01` `2007-07-01` `2007-10-01` `2008-01-01` `2008-04-01` #>   <date>            <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #> 1 2007-01-01        0.162       NA            NA          NA           NA     #> 2 2007-04-01       NA            0.974        NA          NA           NA     #> 3 2007-07-01       NA           NA             1.21       NA           NA     #> 4 2007-10-01       NA           NA            NA           0.156       NA     #> 5 2008-01-01       NA           NA            NA          NA            0.224 #> 6 2008-04-01       NA           NA            NA          NA           NA     #> 7 2008-07-01       NA           NA            NA          NA           NA     #> # ℹ 2 more variables: `2008-07-01` <dbl>, `2008-10-01` <dbl>  # The function uses the pub_date column by default to define columns in wide  # format. Specifying the `names_from` argument allows to use the release column. gdp_releases <- get_nth_release(gdp_short, n = 0:1) vintages_wide(gdp_releases, names_from = \"release\") #> Warning: Ignoring columns: pub_date #> $EA #> # A tibble: 7 × 3 #>   time       release_0 release_1 #>   <date>         <dbl>     <dbl> #> 1 2007-01-01     0.603     0.707 #> 2 2007-04-01     0.349     0.310 #> 3 2007-07-01     0.714     0.750 #> 4 2007-10-01     0.382     0.352 #> 5 2008-01-01     0.800     0.700 #> 6 2008-04-01    -0.200    -0.170 #> 7 2008-07-01    -0.194    NA     #>  #> $US #> # A tibble: 7 × 3 #>   time       release_0 release_1 #>   <date>         <dbl>     <dbl> #> 1 2007-01-01     0.162     0.150 #> 2 2007-04-01     0.974     0.942 #> 3 2007-07-01     1.21      1.20  #> 4 2007-10-01     0.156     0.144 #> 5 2008-01-01     0.224     0.218 #> 6 2008-04-01     0.810     0.699 #> 7 2008-07-01    -0.129    NA # Get the latest release gdp_final <- get_nth_release(gdp_short, n = \"latest\") vintages_wide(gdp_final) #> Warning: Ignoring columns: release #> $EA #> # A tibble: 7 × 2 #>   time       `2008-10-01` #>   <date>            <dbl> #> 1 2007-01-01        0.728 #> 2 2007-04-01        0.477 #> 3 2007-07-01        0.555 #> 4 2007-10-01        0.354 #> 5 2008-01-01        0.661 #> 6 2008-04-01       -0.170 #> 7 2008-07-01       -0.194 #>  #> $US #> # A tibble: 7 × 2 #>   time       `2008-10-01` #>   <date>            <dbl> #> 1 2007-01-01       0.0123 #> 2 2007-04-01       1.18   #> 3 2007-07-01       1.17   #> 4 2007-10-01      -0.0430 #> 5 2008-01-01       0.218  #> 6 2008-04-01       0.699  #> 7 2008-07-01      -0.129 # Get the release three years after the initial release gdp_ea_longer <- gdp %>%    dplyr::filter(id == \"EA\") %>%   ts_pc() %>%    filter(     time >= as.Date(\"2000-01-01\"),     time < as.Date(\"2006-01-01\"),     pub_date >= as.Date(\"2000-01-01\"),     pub_date <= as.Date(\"2006-01-01\")     ) gdp_releases <- get_nth_release(gdp_ea_longer, n = 12) gdp_releases #> # A tibble: 12 × 5 #>    time       pub_date     value id    release    #>    <date>     <date>       <dbl> <chr> <chr>      #>  1 2000-01-01 2005-10-01 1.03    EA    release_12 #>  2 2000-04-01 2005-10-01 0.891   EA    release_12 #>  3 2000-07-01 2005-10-01 0.454   EA    release_12 #>  4 2000-10-01 2005-10-01 0.675   EA    release_12 #>  5 2001-01-01 2005-10-01 0.723   EA    release_12 #>  6 2001-04-01 2005-10-01 0.131   EA    release_12 #>  7 2001-07-01 2005-10-01 0.199   EA    release_12 #>  8 2001-10-01 2005-10-01 0.00809 EA    release_12 #>  9 2002-01-01 2005-10-01 0.301   EA    release_12 #> 10 2002-04-01 2005-10-01 0.381   EA    release_12 #> 11 2002-07-01 2005-10-01 0.407   EA    release_12 #> 12 2002-10-01 2006-01-01 0.112   EA    release_12  # Get the release from September four years after the initial release gdp_releases <- get_fixed_release(   gdp_ea_longer,    years = 4,    month = \"October\"   ) gdp_releases #> # A tibble: 8 × 4 #>   time       pub_date     value id    #>   <date>     <date>       <dbl> <chr> #> 1 2000-01-01 2004-10-01 0.905   EA    #> 2 2000-04-01 2004-10-01 0.917   EA    #> 3 2000-07-01 2004-10-01 0.387   EA    #> 4 2000-10-01 2004-10-01 0.585   EA    #> 5 2001-01-01 2005-10-01 0.723   EA    #> 6 2001-04-01 2005-10-01 0.131   EA    #> 7 2001-07-01 2005-10-01 0.199   EA    #> 8 2001-10-01 2005-10-01 0.00809 EA"},{"path":"https://p-wegmueller.github.io/reviser/articles/reviser.html","id":"visualizing-vintage-data","dir":"Articles","previous_headings":"","what":"Visualizing Vintage Data","title":"Introduction to reviser","text":"reviser package provides simple flexible tools visualizing real-time vintages. primary function plot_vintages(), supports multiple plot types, including line plots, scatter plots, bar plots, boxplots. returns ggplot2 object, allowing customization ggplot2 package. use plot_vintages(), provide data frame containing: time column (representing observation period), value column (containing reported data), column indicating publication date (pub_date) release number (release), determines dimension along data visualized. example, visualize GDP estimates evolved time, can create line plot comparing different vintages:   default, dim_col (dimension along vintages plotted) contains 30 unique values, recent 30 displayed maintain readability. customization, can apply custom themes color scales using: scale_color_reviser() scale_fill_reviser() theme_reviser() functions ensure consistent visual style tailored vintage data analysis.","code":"# Line plot showing GDP vintages over the publication date dimension plot_vintages(   gdp_us_short,   title = \"Real-time GDP Estimates for the US\",   subtitle = \"Growth Rate in %\"   ) # Line plot showing GDP vintages over the release dimension gdp_releases <- get_nth_release(gdp_us_short, n = 0:3) plot_vintages(gdp_releases, dim_col = \"release\")"},{"path":"https://p-wegmueller.github.io/reviser/articles/reviser.html","id":"analyzing-data-revisions-and-releases","dir":"Articles","previous_headings":"","what":"Analyzing Data Revisions and Releases","title":"Introduction to reviser","text":"defining final release, can analyze revisions releases multiple ways: Calculate revisions: get_revisions(). See vignette Understanding Data Revisions details. Analyze revisions: get_revision_analysis(). See vignette Revision Patterns Statistics details. Identify first efficient release: get_first_efficient_release(). See vignette Efficient Release Identification details. Nowcast future revisions: kk_nowcast(). See vignette Nowcasting Revisions details.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"introduction-why-do-data-revisions-occur","dir":"Articles","previous_headings":"","what":"Introduction: Why do data revisions occur?","title":"Understanding Data Revisions","text":"Economic statistical data, particular time series data, frequently revised initial publication. revisions occur due variety reasons, including methodological updates, newly available data, technical adjustments. Understanding revisions happen crucial properly interpreting economic indicators assessing data reliability. Revisions can classified several key categories:","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"incorporation-of-newly-available-or-updated-data","dir":"Articles","previous_headings":"Introduction: Why do data revisions occur?","what":"Incorporation of newly available or updated data","title":"Understanding Data Revisions","text":"Initial estimates economic indicators often based partial preliminary data. comprehensive information becomes available, statistical agencies revise figures reflect accurate representation economic activity. common GDP estimates, labor statistics, lesser extent also inflation measures. Many statistical agencies use interpolation extrapolation techniques estimate quarterly indicators based incomplete information. new input data becomes available, past estimates revised align improved dataset [@sax2013temporal]. Example: U.S. Bureau Economic Analysis (BEA) revises GDP estimates multiple times data becomes available.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"base-data-revisions","dir":"Articles","previous_headings":"Introduction: Why do data revisions occur?","what":"Base data revisions","title":"Understanding Data Revisions","text":"Annual macroeconomic data, national accounts GDP, often revised new yearly aggregates released. Statistical offices typically revise figures recent two three years, older data remains unchanged unless major methodological update. Example: Swiss Federal Statistical Office (SFSO) revises past two years annual GDP August.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"benchmark-revisions-methodological-changes","dir":"Articles","previous_headings":"Introduction: Why do data revisions occur?","what":"Benchmark revisions (methodological changes)","title":"Understanding Data Revisions","text":"Concepts methodologies used national accounts evolve time comply new international standards improve accuracy. Benchmark revisions introduce major changes may affect entire historical time series. Examples benchmark revisions Swiss GDP measurement: revisions can significantly alter growth rates, levels, historical trends.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"minor-changes-in-estimation-methods","dir":"Articles","previous_headings":"Introduction: Why do data revisions occur?","what":"Minor changes in estimation methods","title":"Understanding Data Revisions","text":"Even large-scale benchmark revisions occur, statistical agencies continuously refine estimation methods: Adjustments seasonal adjustment techniques. Replacing outdated indicators new ones. Improving econometric models nowcasting forecasting. Example: Changes consumer confidence indexes incorporated GDP forecasts.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"technical-adjustments-error-corrections","dir":"Articles","previous_headings":"Introduction: Why do data revisions occur?","what":"Technical adjustments & error corrections","title":"Understanding Data Revisions","text":"Revisions can occur due simple technical adjustments, including: Correction data entry errors. Adjustments due missing late-reported data. Revisions survey weighting methods. Example: Bureau Labor Statistics (BLS) revises employment data late reports firms incorporated.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"economic-events-shocks","dir":"Articles","previous_headings":"Introduction: Why do data revisions occur?","what":"Economic events & shocks","title":"Understanding Data Revisions","text":"Unforeseen economic events often require large-scale revisions due structural breaks economic activity. Examples: COVID-19 pandemic: GDP estimates revised significantly lockdowns disrupted economic data collection. Financial crises: Banking sector collapses lead re-evaluation past financial statistics. events create higher--normal uncertainty, necessitating frequent revisions.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"technological-advances-in-data-collection","dir":"Articles","previous_headings":"Introduction: Why do data revisions occur?","what":"Technological advances in data collection","title":"Understanding Data Revisions","text":"adoption big data, machine learning, AI economic statistics introduced new ways process analyze data. technological advances can lead revisions agencies shift sophisticated data integration methods. Example: Nowcasting models using high-frequency data (e.g., credit card transactions) influence revisions real-time GDP estimates.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"some-mathematical-notation","dir":"Articles","previous_headings":"Introduction: Why do data revisions occur?","what":"Some mathematical notation","title":"Understanding Data Revisions","text":"notation follows standard conventions literature: Superscripts (vintage) refer estimate available. Subscripts (time) refer observation recorded. example: \\( y_1^t \\) estimate available time \\( t \\) value variable \\( y \\) time 1. general: \\( y_j^t \\) represents estimate \\( y \\) time \\( j \\), released vintage \\( t \\). Revisions often studied form revision triangle, : \\[ Y = \\begin{bmatrix} y_1^1 & & y_1^{t-l} & & y_1^t \\\\ & \\ddots & \\vdots & \\vdots & \\vdots \\\\ & & y_{t-l}^{t-l} & \\cdots & y_{t-l}^t \\\\ & & & \\ddots & \\vdots \\\\ & & & & y_t^t \\\\ \\end{bmatrix} \\] row corresponds specific time period column corresponds successive release data. move rightward, see later vintages (updated data releases).move downward, observe later time periods.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"extracting-revisions-with-reviser","dir":"Articles","previous_headings":"","what":"Extracting revisions with reviser","title":"Understanding Data Revisions","text":"Now understand revisions occur, next step quantify analyze . economic statistics, real-time data consists multiple vintages observations, vintage represents successive release data. vintages stored revision triangle, also known real-time data matrix, : Rows represent time periods original observations. Columns represent successive vintages (releases) data.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"the-get_revisions-function","dir":"Articles","previous_headings":"Extracting revisions with reviser","what":"The get_revisions() function","title":"Understanding Data Revisions","text":"data scrutiny formatted along lines illustrated introduction reviser, .e., long tidy format data tibble consists : time, time period pub_date /release, publication date release number value, reported value. id, optional column distinguish different series can extract revisions inherent time series vintages function get_revisions(). function allows users compute revisions comparing different vintages time series dataset. supports three primary methods: Fixed Reference Date (ref_date): Computes revisions relative fixed publication date. Nth Release (nth_release): Compares revisions nth release data point. Interval Lag (interval): Measures changes vintages published fixed number periods apart.","code":""},{"path":"https://p-wegmueller.github.io/reviser/articles/understanding-revisions.html","id":"example-usage","dir":"Articles","previous_headings":"Extracting revisions with reviser","what":"Example usage","title":"Understanding Data Revisions","text":"next section, explore practical application visualization techniques revision analysis.","code":"library(reviser)"},{"path":"https://p-wegmueller.github.io/reviser/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Burri. Author, maintainer, copyright holder. Philipp Wegmueller. Author, copyright holder.","code":""},{"path":"https://p-wegmueller.github.io/reviser/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burri M, Wegmueller P (2025). reviser: Tools Studying Revision Properties Real-Time Time Series Vintages. R package version 0.1.0.9000, https://p-wegmueller.github.io/reviser/.","code":"@Manual{,   title = {reviser: Tools for Studying Revision Properties in Real-Time Time Series Vintages},   author = {Marc Burri and Philipp Wegmueller},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://p-wegmueller.github.io/reviser/}, }"},{"path":"https://p-wegmueller.github.io/reviser/index.html","id":"reviser-","dir":"","previous_headings":"","what":"Tools for Studying Revision Properties in Real-Time Time Series Vintages","title":"Tools for Studying Revision Properties in Real-Time Time Series Vintages","text":"reviser R package designed working time-series vintages data. package provides tools clean, visualize, analyze time-series revisions.","code":""},{"path":"https://p-wegmueller.github.io/reviser/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Studying Revision Properties in Real-Time Time Series Vintages","text":"can install development version reviser GitHub :","code":"# Install devtools if not already installed # install.packages(\"devtools\")  # Install the reviser package devtools::install_github(\"p-wegmueller/reviser\")"},{"path":"https://p-wegmueller.github.io/reviser/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Studying Revision Properties in Real-Time Time Series Vintages","text":"","code":"library(reviser) suppressMessages(library(dplyr))  gdp <- gdp %>%    filter(id == \"US\") %>%   tsbox::ts_pc() %>%    tsbox::ts_span(start = \"1980-01-01\")  gdp_wide <- vintages_wide(gdp)  gdp_long <- vintages_long(gdp_wide, keep_na = FALSE)  plot_vintages(   gdp_long %>%    filter(     pub_date >= as.Date(\"2009-01-01\") & pub_date < as.Date(\"2010-01-01\"),     time < as.Date(\"2010-01-01\") & time > as.Date(\"2008-01-01\")     ),   type = \"line\",   title = \"Revisions of GDP during the financial crisis\",   subtitle = \"qoq growth rates\") final_release <- get_nth_release(gdp_long, n = 16)  df <- get_nth_release(gdp_long, n = 0:6)  summary <- get_revision_analysis(df, final_release) #> Warning: Both 'release' and 'pub_date' columns are present in 'df. The #> 'release' column will be used. print(summary) #> # A tibble: 7 × 12 #>   id    release       N `Bias (mean)` `Bias (p-value)` Minimum Maximum    MAR #>   <chr> <chr>     <dbl>         <dbl>            <dbl>   <dbl>   <dbl>  <dbl> #> 1 US    release_0   154       -0.0296          0.162    -0.844   1.01  0.188  #> 2 US    release_1   154       -0.0304          0.133    -0.801   0.706 0.186  #> 3 US    release_2   154       -0.0287          0.161    -0.930   0.706 0.185  #> 4 US    release_3   154       -0.0259          0.118    -0.930   0.662 0.111  #> 5 US    release_4   154       -0.0290          0.0654   -0.930   0.662 0.103  #> 6 US    release_5   154       -0.0363          0.0101   -0.930   0.468 0.0919 #> 7 US    release_6   154       -0.0336          0.00369  -0.574   0.359 0.0735 #> # ℹ 4 more variables: `Std. Dev.` <dbl>, `Noise/Signal` <dbl>, #> #   Correlation <dbl>, `Correlation (p-value)` <dbl> efficient_release <- get_first_efficient_release(df, final_release) summary(efficient_release) #> Efficient release:  0  #>  #> Model summary:  #>  #> Call: #> stats::lm(formula = formula, data = df_wide) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.82139 -0.12266  0.04048  0.13457  1.00888  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.005314   0.029173  -0.182    0.856     #> release_0    0.963024   0.030626  31.445   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.2617 on 152 degrees of freedom #>   (16 observations deleted due to missingness) #> Multiple R-squared:  0.8668, Adjusted R-squared:  0.8659  #> F-statistic: 988.8 on 1 and 152 DF,  p-value: < 2.2e-16 #>  #>  #> Test summary:  #> Linear hypothesis test #>  #> Hypothesis: #> (Intercept) = 0 #> release_0 = 1 #>  #> Model 1: restricted model #> Model 2: final ~ release_0 #>  #> Note: Coefficient covariance matrix supplied. #>  #>   Res.Df Df      F  Pr(>F)   #> 1    154                     #> 2    152  2 2.4805 0.08708 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://p-wegmueller.github.io/reviser/reference/fetch_alfred_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Real-Time Data from ALFRED and Format for ReviseR — fetch_alfred_data","title":"Download Real-Time Data from ALFRED and Format for ReviseR — fetch_alfred_data","text":"function retrieves real-time data Federal Reserve Bank St. Louis ALFRED database formats tidy structure suitable analysis ReviseR package.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/fetch_alfred_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Real-Time Data from ALFRED and Format for ReviseR — fetch_alfred_data","text":"","code":"fetch_alfred_data(   series_id,   series_name = NULL,   observation_start = \"1995-01-01\",   observation_end = \"2024-12-01\",   realtime_start = \"2015-01-01\",   realtime_end = \"2022-01-01\",   api_key = NULL )"},{"path":"https://p-wegmueller.github.io/reviser/reference/fetch_alfred_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Real-Time Data from ALFRED and Format for ReviseR — fetch_alfred_data","text":"series_id character vector specifying one ALFRED series IDs (e.g., c(\"CPIAUCSL\", \"PCEPI\")). series_name character vector specifying custom names series (defaults series_id). observation_start character string specifying start date observations (format: \"YYYY-MM-DD\"). observation_end character string specifying end date observations (format: \"YYYY-MM-DD\"). realtime_start character string specifying start date real-time vintages (format: \"YYYY-MM-DD\"). realtime_end character string specifying end date real-time vintages (format: \"YYYY-MM-DD\"). api_key character string containing valid ALFRED API key (optional, defaults NULL).","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/fetch_alfred_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Real-Time Data from ALFRED and Format for ReviseR — fetch_alfred_data","text":"tibble following columns: ref_date: reference date (actual time observation). pub_date: publication date vintage (real-time data release date). id: series identifier (series_name provided, otherwise series_id). value: reported value given observation vintage.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/fetch_alfred_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Real-Time Data from ALFRED and Format for ReviseR — fetch_alfred_data","text":"","code":"# Fetch real-time CPI and PCE data from ALFRED data <- fetch_alfred_data(   series_id = c(\"CPIAUCSL\", \"PCEPI\"),   series_name = c(\"cpi\", \"pce\"),   observation_start = \"1975-01-01\",   observation_end = \"2024-01-31\",   realtime_start = \"2000-01-01\",   realtime_end = \"2024-01-31\" ) #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `name = as.numeric(.data$name)`. #> Caused by warning: #> ! NAs introduced by coercion  head(data) #> # A tibble: 6 × 4 #>   time       pub_date   id    value #>   <date>     <date>     <chr> <dbl> #> 1 1975-01-01 2000-01-01 cpi    52.3 #> 2 1975-02-01 2000-01-01 cpi    52.6 #> 3 1975-03-01 2000-01-01 cpi    52.8 #> 4 1975-04-01 2000-01-01 cpi    53   #> 5 1975-05-01 2000-01-01 cpi    53.1 #> 6 1975-06-01 2000-01-01 cpi    53.5"},{"path":"https://p-wegmueller.github.io/reviser/reference/gdp.html","id":null,"dir":"Reference","previous_headings":"","what":"Vintages Data — gdp","title":"Vintages Data — gdp","text":"collection real-time datasets.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/gdp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vintages Data — gdp","text":"","code":"gdp"},{"path":"https://p-wegmueller.github.io/reviser/reference/gdp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vintages Data — gdp","text":"gdp: Quarterly Vintages (Billions real dollars, seasonally adjusted) Timeframe: Q1 1980 - Q4 2024 Real-Time Vintages: Q4 2002 - Q4 2024 Frequency: Quarterly Format: tibble quarterly observations 3 variables: time: Date observation. pub_date: Publication date vintage values: Numeric, real GDP (seasonally adjusted). id: Country code","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/gdp.html","id":"sources","dir":"Reference","previous_headings":"","what":"Sources","title":"Vintages Data — gdp","text":"data taken realtime database Indergand Leist (2014). Countries: CHE: Switzerland Source: SECO US: United States Sources: FRED, OECD EA: Euro Area Sources: Eurostat, OECD JP: Japan Sources: Cabinet Office (Japan), OECD","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/gdp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vintages Data — gdp","text":"Indergand, R., Leist, S. Real-Time Data Set Switzerland. Swiss J Economics Statistics 150, 331–352 (2014). https://doi.org/10.1007/BF03399410","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/gdp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vintages Data — gdp","text":"","code":"# Load [gdp] dataset data(gdp)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_days_to_release.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Number of Days Between Period End and First Release — get_days_to_release","title":"Calculate the Number of Days Between Period End and First Release — get_days_to_release","text":"Computes number days publication date (pub_date) release time period (time) end date record dataset.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_days_to_release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Number of Days Between Period End and First Release — get_days_to_release","text":"","code":"get_days_to_release(df)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_days_to_release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Number of Days Between Period End and First Release — get_days_to_release","text":"df data frame containing data vintages. data frame must include columns pub_date (publication date release) time (corresponding time period data).","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_days_to_release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Number of Days Between Period End and First Release — get_days_to_release","text":"data frame additional column days_to_release representing number days publication date (pub_date) time period (time) release.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_days_to_release.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Number of Days Between Period End and First Release — get_days_to_release","text":"function calculates difference pub_date time row dataset. result expressed number days release publication date corresponding time period end. dataset wide format, first transformed long format using vintages_long.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_days_to_release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Number of Days Between Period End and First Release — get_days_to_release","text":"","code":"# Example data df <- dplyr::filter(reviser::gdp, id==\"US\")  # Calculate days to release df_with_days <- get_days_to_release(df)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_efficient_release.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the First Efficient Release in Vintage Data — get_first_efficient_release","title":"Identify the First Efficient Release in Vintage Data — get_first_efficient_release","text":"Identifies first release sequence vintages \"efficient\" relative final release. release deemed efficient satisfies specific conditions unbiasedness efficiency, tested using Mincer-Zarnowitz type linear regression hypothesis testing.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_efficient_release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the First Efficient Release in Vintage Data — get_first_efficient_release","text":"","code":"get_first_efficient_release(   df,   final_release,   significance = 0.05,   test_all = FALSE )"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_efficient_release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the First Efficient Release in Vintage Data — get_first_efficient_release","text":"df data frame class tbl_release containing vintage data. must include columns: time: reference period (e.g., quarter month). value: observed value given release. release: release number identifier. final_release data frame containing final release data. must include columns: time: reference period. value: observed final value given period. significance numeric value specifying significance level hypothesis test (default 0.05). test_all logical value indicating whether test releases, even finding first efficient release (default FALSE).","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_efficient_release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the First Efficient Release in Vintage Data — get_first_efficient_release","text":"list class list_eff_rel following elements: e: index first efficient release. (0 indexed) data: long-format data frame containing vintage data final release appended. models: list linear regression models fitted release. tests: list hypothesis test results release.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_efficient_release.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify the First Efficient Release in Vintage Data — get_first_efficient_release","text":"function performs following steps: Validates inputs ensures df final_release correct format. Iteratively tests release efficiency using linear regression model form: $$final = \\beta_0 + \\beta_1 \\cdot release_i + \\epsilon$$ null hypothesis efficiency : \\(\\beta_0 = 0\\) (bias) \\(\\beta_1 = 1\\) (efficiency) Uses heteroskedasticity autocorrelation consistent (HAC) standard errors robust hypothesis testing. Stops testing first efficient release found (unless test_all = TRUE). efficient release found, warning issued.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_efficient_release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the First Efficient Release in Vintage Data — get_first_efficient_release","text":"","code":"# Example data df <- get_nth_release(tsbox::ts_pc(dplyr::filter(reviser::gdp, id==\"US\")), n = 0:3)  final_release <- get_nth_release(tsbox::ts_pc(dplyr::filter(reviser::gdp, id==\"US\")), n = 10)  # Identify the first efficient release result <- get_first_efficient_release(df, final_release, significance = 0.05)  # Access the index of the first efficient release result$e #> [1] 0"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_release.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the First Data Release (Vintage) — get_first_release","title":"Extract the First Data Release (Vintage) — get_first_release","text":"Filters input dataset return earliest release (vintage) time period.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the First Data Release (Vintage) — get_first_release","text":"","code":"get_first_release(df, diagonal = FALSE)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the First Data Release (Vintage) — get_first_release","text":"df data frame containing data vintages. data frame must include columns pub_date (publication date release) time (corresponding time period data). diagonal Logical. TRUE, function returns real first releases.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the First Data Release (Vintage) — get_first_release","text":"filtered data frame containing first release(s). resulting data frame assigned class tbl_release indicate structure.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_release.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the First Data Release (Vintage) — get_first_release","text":"time period, function identifies release earliest publication date (pub_date). new column release added labels rows resulting data frame release_0. diagonal set TRUE, function returns real first releases. historic values vintages exist returned.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_first_release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the First Data Release (Vintage) — get_first_release","text":"","code":"# Example data df <- dplyr::filter(reviser::gdp, id==\"US\")  # Get the first release for each time period first_release <- get_first_release(df)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_fixed_release.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Vintage Values from a Data Frame — get_fixed_release","title":"Extract Vintage Values from a Data Frame — get_fixed_release","text":"statistical agencies make final revision data certain period time give month year. function extracts values given month quarter specified  number years initial release.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_fixed_release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Vintage Values from a Data Frame — get_fixed_release","text":"","code":"get_fixed_release(df, years, month = NULL, quarter = NULL)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_fixed_release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Vintage Values from a Data Frame — get_fixed_release","text":"df data frame containing columns pub_date (publication date) time (observation date). years number years pub_date values extracted. month optional parameter specifying target month name (\"July\") integer (7). used quarter. quarter optional parameter specifying target quarter (1-4). used month.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_fixed_release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Vintage Values from a Data Frame — get_fixed_release","text":"filtered data frame containing values matching specified criteria.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_fixed_release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Vintage Values from a Data Frame — get_fixed_release","text":"","code":"df <- dplyr::filter(reviser::gdp, id==\"US\") dta <- get_fixed_release(df, month = \"July\", years = 3) dta <- get_fixed_release(df, month = 7, years = 3) dta <- get_fixed_release(df, quarter = 3, years = 3)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_latest_release.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Latest Data Release (Vintage) — get_latest_release","title":"Extract the Latest Data Release (Vintage) — get_latest_release","text":"Filters input dataset return recent release (vintage) time period.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_latest_release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Latest Data Release (Vintage) — get_latest_release","text":"","code":"get_latest_release(df)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_latest_release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Latest Data Release (Vintage) — get_latest_release","text":"df data frame containing data vintages. data frame must include columns pub_date (publication date release) time (corresponding time period data).","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_latest_release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Latest Data Release (Vintage) — get_latest_release","text":"filtered data frame containing recent release(s). resulting data frame assigned class tbl_release indicate structure.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_latest_release.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the Latest Data Release (Vintage) — get_latest_release","text":"time period, function identifies release latest publication date (pub_date) adds column release labels release release_N, N release index (zero indexed).","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_latest_release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Latest Data Release (Vintage) — get_latest_release","text":"","code":"# Example data df <- dplyr::filter(reviser::gdp, id==\"US\")  # Get the latest release for each time period latest_release <- get_latest_release(df)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_nth_release.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Nth Data Release (Vintage) — get_nth_release","title":"Extract the Nth Data Release (Vintage) — get_nth_release","text":"Filters input dataset return Nth release (vintage) data time period. function supports selecting first, latest, specific numbered release.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_nth_release.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Nth Data Release (Vintage) — get_nth_release","text":"","code":"get_nth_release(df, n = 0, diagonal = FALSE)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_nth_release.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Nth Data Release (Vintage) — get_nth_release","text":"df data frame containing data vintages. data frame must include columns pub_date (publication date release) time (corresponding time period data). n release number extract. Accepts: - positive integer vector (e.g., 1 first release, 2 second, etc.). - \"first\" extract first release. - \"latest\" extract recent release. Default 1 (first release). diagonal Logical. TRUE, function returns real first releases.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_nth_release.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Nth Data Release (Vintage) — get_nth_release","text":"filtered data frame containing specified release(s). resulting data frame assigned class tbl_release indicate structure. diagonal set TRUE, function returns real first releases. historic values vintages exist returned.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_nth_release.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the Nth Data Release (Vintage) — get_nth_release","text":"behavior depends value n: Non-negative integer: function retrieves Nth release time period (e.g., 0 = first release, 1 = second release, etc.). \"first\": Retrieves first release time period (via get_first_release). \"latest\": Retrieves recent release time period (via get_latest_release).","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_nth_release.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Nth Data Release (Vintage) — get_nth_release","text":"","code":"# Example data df <- dplyr::filter(reviser::gdp, id==\"US\")  # Get the first release (n = 0) first_release <- get_nth_release(df, n = 0)  # Get the latest release latest_release <- get_nth_release(df, n = \"latest\")  # Get the second release (n = 1) second_release <- get_nth_release(df, n = 1)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_releases_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Data Releases for a Specific Date — get_releases_by_date","title":"Get Data Releases for a Specific Date — get_releases_by_date","text":"Filters input dataset return releases corresponding specific time period (date).","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_releases_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Data Releases for a Specific Date — get_releases_by_date","text":"","code":"get_releases_by_date(df, date)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_releases_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Data Releases for a Specific Date — get_releases_by_date","text":"df data frame containing data vintages. data frame must include columns pub_date (publication date release) time (corresponding time period data). date Date object specifying time period (date) releases retrieved.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_releases_by_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Data Releases for a Specific Date — get_releases_by_date","text":"data frame containing releases specified date. returned data frame include structure input, filtered include rows matching date time column.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_releases_by_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Data Releases for a Specific Date — get_releases_by_date","text":"function filters input data based specified date time column. input dataset must pub_date time columns, time period match given date. dataset wide format, first transformed long format using helper function vintages_long.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_releases_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Data Releases for a Specific Date — get_releases_by_date","text":"","code":"# Example data df <- dplyr::filter(reviser::gdp, id==\"US\")  # Get releases for a specific date date <- as.Date(\"2020-04-01\") releases_on_date <- get_releases_by_date(df, date)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revision_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Revision Analysis Summary Statistics — get_revision_analysis","title":"Revision Analysis Summary Statistics — get_revision_analysis","text":"Calculates comprehensive set summary statistics hypothesis tests revisions initial final data releases.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revision_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Revision Analysis Summary Statistics — get_revision_analysis","text":"","code":"get_revision_analysis(df, final_release, degree = 1, grouping_var = NULL)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revision_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Revision Analysis Summary Statistics — get_revision_analysis","text":"df data frame containing initial data releases. Must include columns: time: time variable. value: observed values initial release. Optionally, release (release identifier) id (grouping variable). final_release data frame containing final release data. Must include columns: time: time variable (matching initial release data). value: observed values final release. degree integer 1 5 specifying level detail output: 1: Default, descriptive statistics (bias, min/max, standard deviation, noise/signal ratio, correlation). 2: Efficiency tests (bias intercept slope tests, efficiency tests intercept slope). 3: Orthogonality tests (correlation, autocorrelation, Theil's U statistics, seasonality tests). 4: News vs. noise tests (p-values news noise tests). 5: Full set statistics tests. grouping_var character string specifying grouping variable data frame. Defaults pub_date release available.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revision_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Revision Analysis Summary Statistics — get_revision_analysis","text":"data frame one row per grouping (applicable) columns summary statistics test results. resulting data frame class revision_summary.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revision_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Revision Analysis Summary Statistics — get_revision_analysis","text":"function performs variety statistical analyses understand nature revisions initial final data releases. function: Checks input data consistency transforms necessary. Merges initial final release datasets time variable optional grouping variables (id release). Computes summary statistics mean, standard deviation, range revisions. Performs hypothesis tests bias, efficiency, correlation using robust methods (e.g., Newey-West standard errors). Includes tests seasonality, noise, news effects. Key tests include: Bias Tests: Tests presence mean bias regression bias. Efficiency Tests: Tests whether revisions orthogonal initial values. Autocorrelation Seasonality: Tests serial correlation seasonal patterns revisions. Theil's U Statistics: Measures predictive accuracy initial releases relative final values. Noise vs. News: Differentiates unpredictable errors (noise) systematic adjustments (news). function supports grouped calculations based presence id release columns input. following statistics tests calculated: N: number observations group. Frequency: inferred data frequency (e.g., 12 monthly 4 quarterly data). Bias (mean): mean revision, testing whether revisions systematically biased. Bias (p-value): p-value t-test evaluating significance mean revision. Bias (robust p-value): Newey-West HAC robust p-value mean revision test. Bias (intercept): Intercept regression final values initial values, testing systematic bias. Bias (intercept p-value): p-value intercept test. Bias (slope): Slope regression final values initial values, testing alignment . Bias (slope p-value): p-value slope test, null hypothesis slope = 1. Efficiency (intercept): Intercept regression revisions initial values, testing forecast efficiency. Efficiency (intercept p-value): p-value efficiency intercept test. Efficiency (slope): Slope regression revisions initial values, testing forecast efficiency. Efficiency (slope p-value): p-value efficiency slope test, null hypothesis slope = 0. Minimum: minimum revision group. Maximum: maximum revision group. Std. Dev.: standard deviation revisions, indicating variability. Noise/Signal: ratio standard deviation revisions standard deviation final values. Correlation: Pearson correlation revisions initial values, testing relationship. Correlation (p-value): p-value significance correlation. Autocorrelation (1st): first-order autocorrelation revisions, measuring persistence. Autocorrelation (1st p-value): p-value first-order autocorrelation test. Autocorrelation 4th (Ljung-Box p-value): p-value Ljung-Box test higher-order autocorrelation. Theil's U1: normalized measure forecast accuracy, comparing root mean squared error (RMSE) revisions RMSE final initial values. Theil's U2: measure comparing forecast changes actual changes. Seasonality (Ljung-Box p-value): Tests seasonality revisions using Ljung-Box test lags matching data frequency. Seasonality (Friedman p-value): Tests seasonality revisions using Friedman test. News test (p-value): Tests whether revisions explained information final values. Noise test (p-value): Tests whether revisions uncorrelated initial values.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revision_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Revision Analysis Summary Statistics — get_revision_analysis","text":"","code":"# Example usage: df <- get_nth_release(dplyr::filter(tsbox::ts_pc(reviser::gdp, id==\"US\")), n = 0:3) #> Error in tsbox::ts_pc(reviser::gdp, id == \"US\"): unused argument (id == \"US\")  final_release <- get_nth_release(dplyr::filter(tsbox::ts_pc(reviser::gdp, id==\"US\")), n = \"latest\") #> Error in tsbox::ts_pc(reviser::gdp, id == \"US\"): unused argument (id == \"US\")  results <- get_revision_analysis(df, final_release) #> Error in vintages_check(df): The provided object is not a data.frame or tibble. print(results) #> Error: object 'results' not found"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Revisions in Vintage Data — get_revisions","title":"Calculate Revisions in Vintage Data — get_revisions","text":"Computes revisions vintage data based specified reference points: fixed reference date, nth release, specified interval. function allows users analyze differences data vintages across time.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Revisions in Vintage Data — get_revisions","text":"","code":"get_revisions(df, interval = NULL, nth_release = NULL, ref_date = NULL)"},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Revisions in Vintage Data — get_revisions","text":"df data frame containing vintage data. data frame must include least following columns: pub_date: publication date vintage. time: reference period (e.g., quarter month). value: observed value given vintage reference period. interval positive integer specifying lag (periods) vintages compute revisions. Defaults 1 parameter specified. nth_release positive integer \"latest\", specifying release use reference revisions. \"latest\", recent vintage used. ref_date date specifying fixed reference publication date compare vintages .","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Revisions in Vintage Data — get_revisions","text":"data frame (tibble) class tbl_revision, following columns: pub_date: publication date vintage. time: reference period (e.g., quarter month). value: calculated revision, .e., difference observed value reference value.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revisions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Revisions in Vintage Data — get_revisions","text":"function supports three mutually exclusive methods calculating revisions: Reference date (ref_date): Computes revisions relative fixed publication date. Interval (interval): Computes revisions relative vintages published interval periods earlier. Nth release (nth_release): Computes revisions relative nth vintage release reference period. method explicitly specified, interval = 1 used default. Input validation ensures one ref_date, nth_release, interval specified.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/get_revisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Revisions in Vintage Data — get_revisions","text":"","code":"# Example data df <- dplyr::filter(reviser::gdp , id==\"US\")  # Calculate revisions using an interval of 1 revisions_interval <- get_revisions(df, interval = 1)  # Calculate revisions using a fixed reference date revisions_date <- get_revisions(df, ref_date = as.Date(\"2023-02-01\"))  # Calculate revisions relative to the nth release (2nd release) revisions_nth <- get_revisions(df, nth_release = 1)"},{"path":"https://p-wegmueller.github.io/reviser/reference/kk_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Kishor-Koenig Model for Nowcasting — kk_nowcast","title":"Generalized Kishor-Koenig Model for Nowcasting — kk_nowcast","text":"Implements generalized Kishor-Koenig (KK) model nowcasting forecasting state-space models, allowing multiple vintages data, efficient estimation, Kalman filtering smoothing.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/kk_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Kishor-Koenig Model for Nowcasting — kk_nowcast","text":"","code":"kk_nowcast(df, e, h = 0, model = \"Kishor-Koenig\", trace = 0)"},{"path":"https://p-wegmueller.github.io/reviser/reference/kk_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Kishor-Koenig Model for Nowcasting — kk_nowcast","text":"df data frame containing time series data either \"long\" \"wide\" format. must include columns time index different release vintages. e integer indicating number data vintages include model. Must greater 0. h integer specifying forecast horizon. Default 0, implies forecasts. Must greater equal 0. model string specifying type model use. Options : - \"Kishor-Koenig\" \"KK\" (default): Full Kishor-Koenig model. - \"Howrey\": Howrey's simplified framework. - \"Classical\": Classical model without vintage effects. trace integer controlling level output optimization procedure. Default 0 (minimal output).","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/kk_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Kishor-Koenig Model for Nowcasting — kk_nowcast","text":"list following components: forecast_states tibble forecasted state variables, including forecast dates. Returned h > 0. filtered_states tibble filtered state variables based Kalman filter. observations tibble observed variables used model. forecast_observation tibble forecasted observations. Returned h > 0. smoothed_states tibble smoothed state variables based Kalman smoother. kk_model_mat list KK model matrices (e.g., transition observation matrices). ss_model_mat list state-space model matrices derived KK model. params Estimated model parameters, including covariance terms. fit fitted model object SUR estimation procedure.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/kk_nowcast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Kishor-Koenig Model for Nowcasting — kk_nowcast","text":"function supports multiple models, including full Kishor-Koenig framework, Howrey's model, classical approach. handles data preprocessing, estimation system equations using Seemingly Unrelated Regressions (SUR), application Kalman filter smoother. function requires well-structured input data multiple vintages. time series must regular, function automatically checks transforms data needed.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/kk_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Kishor-Koenig Model for Nowcasting — kk_nowcast","text":"","code":"# Example usage: df <- get_nth_release(   tsbox::ts_span(     tsbox::ts_pc(       dplyr::filter(reviser::gdp, id==\"US\")       ),       start = \"1980-01-01\"      ),      n = 0:1    ) df <- na.omit(dplyr::select(df, -id))  e <- 1  # Number of efficient release h <- 2  # Forecast horizon model_result <- kk_nowcast(df, e, h = h, model = \"Kishor-Koenig\") #> Warning: Ignoring columns: pub_date  model_result$params #>           F0          G01          G00           v0         eps0  #>  0.200853533 -0.001694615  0.995630065  1.598322193  0.006664367"},{"path":"https://p-wegmueller.github.io/reviser/reference/plot_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Vintages Data — plot_vintages","title":"Plot Vintages Data — plot_vintages","text":"flexible function visualize vintage data using various plot types line plots, point plots, bar plots, boxplots. function ensures input data validated appropriately transformed plotting.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/plot_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Vintages Data — plot_vintages","text":"","code":"plot_vintages(   df,   type = \"line\",   dim_col = \"pub_date\",   title = \"\",   subtitle = \"\",   ylab = \"\" )"},{"path":"https://p-wegmueller.github.io/reviser/reference/plot_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Vintages Data — plot_vintages","text":"df data frame containing vintage data plotted. Must include least two columns: one time (time) one value (value). type character string specifying type plot create. Options : \"line\": Line plot (default). \"point\": Scatter plot. \"bar\": Bar plot. \"boxplot\": Boxplot. dim_col character string specifying column name df represents publication dates grouping dimensions (e.g. \"release\"). Defaults \"pub_date\". title character string specifying title plot. Defaults empty string. subtitle character string specifying subtitle plot. Defaults empty string. ylab character string specifying label y-axis. Defaults empty string.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/plot_vintages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Vintages Data — plot_vintages","text":"ggplot2 plot object representing specified vintage data visualization.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/plot_vintages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Vintages Data — plot_vintages","text":"plot_vintages function designed handle data frames wide long formats. ensures provided data frame includes necessary columns plotting. dim_col column contains 30 unique values, recent 30 plotted. Additionally, function supports custom themes color scales using scale_color_reviser, scale_fill_reviser, theme_reviser. function raises error : type argument one \"line\", \"point\", \"bar\", \"boxplot\". specified dim_col column df. title, subtitle, ylab character strings.","code":""},{"path":[]},{"path":"https://p-wegmueller.github.io/reviser/reference/plot_vintages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Vintages Data — plot_vintages","text":"","code":"# Example data df <- data.frame(   time = rep(seq.Date(from = as.Date(\"2022-01-01\"), by = \"month\", length.out = 12), 3),   value = runif(36, 50, 100),   pub_date = rep(c(\"2022-01-05\", \"2022-02-07\", \"2022-03-03\"), each = 12) )  # Line plot plot_vintages(   df,   type = \"line\",   dim_col = \"pub_date\",   title = \"Line plot\",   subtitle = \"Randomly generated data\"   )   # Point plot plot_vintages(   df,   type = \"point\",   dim_col = \"pub_date\",   title = \"Scatter plot\",   subtitle = \"Randomly generated data\"   )   # Bar plot plot_vintages(   df,   type = \"bar\",   dim_col = \"pub_date\",   title = \"Bar plot\",   subtitle = \"Randomly generated data\"   )   # Boxplot plot_vintages(   df,   type = \"boxplot\",   dim_col = \"pub_date\",   title = \"Boxplot\",   subtitle = \"Randomly generated data\"   )"},{"path":"https://p-wegmueller.github.io/reviser/reference/reviser-package.html","id":null,"dir":"Reference","previous_headings":"","what":"reviser: Tools for Studying Revision Properties in Real-Time Time Series Vintages — reviser-package","title":"reviser: Tools for Studying Revision Properties in Real-Time Time Series Vintages — reviser-package","text":"learn reviser, start vignettes: browseVignettes(package = \"reviser\")","code":""},{"path":[]},{"path":"https://p-wegmueller.github.io/reviser/reference/reviser-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"reviser: Tools for Studying Revision Properties in Real-Time Time Series Vintages — reviser-package","text":"Maintainer: Marc Burri marc.burri91@gmail.com (ORCID) [copyright holder] Authors: Philipp Wegmueller philipp.wemueller@seco.admin.ch [copyright holder]","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/summary.lst_efficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of Efficient Release Models — summary.lst_efficient","title":"Summary of Efficient Release Models — summary.lst_efficient","text":"Provides detailed summary regression model hypothesis test first efficient release identified get_first_efficient_release function.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/summary.lst_efficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of Efficient Release Models — summary.lst_efficient","text":"","code":"# S3 method for class 'lst_efficient' summary(object, ...)"},{"path":"https://p-wegmueller.github.io/reviser/reference/summary.lst_efficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of Efficient Release Models — summary.lst_efficient","text":"object output object get_first_efficient_release function. object must class list_eff_rel. ... Additional arguments (used).","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/summary.lst_efficient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of Efficient Release Models — summary.lst_efficient","text":"Returns tibble following columns: id: identifier time series (present input data). e: index first efficient release. alpha: intercept coefficient regression model. beta: coefficient slope. p-value: p-value joint hypothesis test (alpha = 0 beta = 1). n_tested: number releases tested.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/summary.lst_efficient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of Efficient Release Models — summary.lst_efficient","text":"function prints following information: index first efficient release. summary regression model fitted efficient release, includes coefficients, R-squared values, relevant statistics. hypothesis test results efficient release, showing test statistic p-value null hypothesis unbiasedness efficiency. function assumes object includes: e: index first efficient release (0-based). models: list linear regression models release. tests: list hypothesis test results corresponding release.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/summary.lst_efficient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of Efficient Release Models — summary.lst_efficient","text":"","code":"# Example usage df <- get_nth_release(tsbox::ts_pc(dplyr::filter(reviser::gdp , id==\"US\")), n = 1:4)  final_release <- get_nth_release(tsbox::ts_pc(dplyr::filter(reviser::gdp, id==\"US\")), n = 10)  # Identify the first efficient release result <- get_first_efficient_release(df, final_release, significance = 0.05) summary(result) #> Efficient release:  0  #>  #> Model summary:  #>  #> Call: #> stats::lm(formula = formula, data = df_wide) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.88971 -0.12583  0.02686  0.12286  0.69564  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 0.0002137  0.0204027    0.01    0.992     #> release_1   0.9757504  0.0154917   62.98   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.231 on 166 degrees of freedom #>   (9 observations deleted due to missingness) #> Multiple R-squared:  0.9598,\tAdjusted R-squared:  0.9596  #> F-statistic:  3967 on 1 and 166 DF,  p-value: < 2.2e-16 #>  #>  #> Test summary:  #>  #> Linear hypothesis test: #> (Intercept) = 0 #> release_1 = 1 #>  #> Model 1: restricted model #> Model 2: final ~ release_1 #>  #> Note: Coefficient covariance matrix supplied. #>  #>   Res.Df Df      F Pr(>F) #> 1    168                  #> 2    166  2 2.2448 0.1092"},{"path":"https://p-wegmueller.github.io/reviser/reference/theme_reviser.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Visualization Theme and Color Scales for Reviser — theme_reviser","title":"Custom Visualization Theme and Color Scales for Reviser — theme_reviser","text":"functions provide custom visualization theme color scales use ggplot2, inspired tsbox package.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/theme_reviser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Visualization Theme and Color Scales for Reviser — theme_reviser","text":"","code":"theme_reviser(   base_size = 12,   legend.position = \"bottom\",   legend.direction = \"horizontal\" )  colors_reviser()  scale_color_reviser(...)  scale_fill_reviser(...)"},{"path":"https://p-wegmueller.github.io/reviser/reference/theme_reviser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Visualization Theme and Color Scales for Reviser — theme_reviser","text":"base_size Numeric. base font size theme. Default 12. legend.position Character. Position legend. Default \"bottom\". legend.direction Character. Direction legend. Default \"horizontal\". ... Additional arguments passed ggplot2 scale functions.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/theme_reviser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Visualization Theme and Color Scales for Reviser — theme_reviser","text":"customized ggplot2 theme, color palette, scale.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/theme_reviser.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Custom Visualization Theme and Color Scales for Reviser — theme_reviser","text":"theme_reviser: Defines minimal theme custom adjustments axis titles, plot titles, subtitles, captions, legend positioning. colors_reviser: Provides predefined set colors, including soft black, palette suitable colorblind readers, additional colors extended use. scale_color_reviser: ggplot2 color scale uses custom colors_reviser palette. scale_fill_reviser: ggplot2 fill scale uses custom colors_reviser palette.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/theme_reviser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Visualization Theme and Color Scales for Reviser — theme_reviser","text":"","code":"library(ggplot2) ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +   geom_point(size = 3) +   theme_reviser() +   scale_color_reviser()"},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Vintages Data to Long Format — vintages_long","title":"Convert Vintages Data to Long Format — vintages_long","text":"Converts vintages dataset wide format long format, optionally adding id input list data frames. long format contains one row per combination time names_to (e.g., pub_date release), values stored single value column.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Vintages Data to Long Format — vintages_long","text":"","code":"vintages_long(df, names_to = \"pub_date\", keep_na = FALSE)"},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Vintages Data to Long Format — vintages_long","text":"df data frame, tibble, list data frames containing vintages data wide format. names_to name column create wide-format column names. Must either \"pub_date\" (default) \"release\". keep_na Logical. TRUE, retains rows NA values value column. Default FALSE.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Vintages Data to Long Format — vintages_long","text":"long-format data frame tibble. input list wide-format data frames, output single combined long-format data frame.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Vintages Data to Long Format — vintages_long","text":"","code":"# Example wide-format data long_data <- dplyr::filter(reviser::gdp, id==\"US\")  # Convert to wide format wide_data <- vintages_wide(long_data)  # Example list of wide-format data frames wide_list <- list(   A = wide_data$US,   B = wide_data$US )  # Convert list to long format long_data <- vintages_long(wide_list, names_to = \"pub_date\")"},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Columns to Align with Package Standards — vintages_rename","title":"Rename Columns to Align with Package Standards — vintages_rename","text":"Renames columns data frame tibble align conventions used package. Converts renamed columns appropriate data types.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Columns to Align with Package Standards — vintages_rename","text":"","code":"vintages_rename(   df,   col_time = NULL,   col_pub_date = NULL,   col_value = NULL,   col_release = NULL,   col_id = NULL )"},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Columns to Align with Package Standards — vintages_rename","text":"df data frame tibble containing data renamed. col_time Optional. name column renamed time. time column represents observation dates converted Date format. col_pub_date Optional. name column renamed pub_date. pub_date column represents release dates converted Date format. col_value Optional. name column renamed value. value column represents observed values converted numeric. col_release Optional. name column renamed release. id column used identifier converted character format. col_id Optional. name column renamed id.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Columns to Align with Package Standards — vintages_rename","text":"data frame tibble renamed columns respective data types converted (specified). original class input object preserved.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename Columns to Align with Package Standards — vintages_rename","text":"function checks validity input data frame ensures least one column specified renaming. column renamed, also converted expected data type: time pub_date converted Date. value converted numeric. release id converted character.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Columns to Align with Package Standards — vintages_rename","text":"","code":"# Example data data <- tibble::tibble(   observation_date = seq.Date(as.Date(\"2020-01-01\"), as.Date(\"2020-06-01\"), by = \"month\"),   release_date = seq.Date(as.Date(\"2020-01-15\"), as.Date(\"2020-06-15\"), by = \"month\"),   observed_value = rnorm(6),   identifier = rep(\"A\", 6) )  # Rename columns renamed_data <- vintages_rename(   data,   col_time = observation_date,   col_pub_date = release_date,   col_value = observed_value,   col_id = identifier )"},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Vintages Data to Wide Format — vintages_wide","title":"Convert Vintages Data to Wide Format — vintages_wide","text":"Converts vintages dataset long format wide format, optionally grouping id present. wide format uses one column per unique value names_from parameter, observation dates (time) rows values (value) cell contents.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Vintages Data to Wide Format — vintages_wide","text":"","code":"vintages_wide(df, names_from = \"pub_date\")"},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Vintages Data to Wide Format — vintages_wide","text":"df data frame tibble containing vintages data long format. names_from name column whose unique values used column names wide format. Defaults \"pub_date\". : \"release\".","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Vintages Data to Wide Format — vintages_wide","text":"id column present, function returns named list wide-format data frames, one unique id. Otherwise, returns single wide-format data frame.","code":""},{"path":"https://p-wegmueller.github.io/reviser/reference/vintages_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Vintages Data to Wide Format — vintages_wide","text":"","code":"# Example wide-format data long_data <- dplyr::filter(reviser::gdp, id==\"US\")  # Convert to wide format wide_data <- vintages_wide(long_data)  # Example list of wide-format data frames wide_list <- list(   A = wide_data$US,   B = wide_data$US )  # Convert list to long format long_data1 <- vintages_long(wide_data, names_to = \"pub_date\") long_data2 <- vintages_long(wide_list, names_to = \"pub_date\")"}]
